var searchIndex = {};
searchIndex["akio"] = {"doc":"","items":[[3,"ActorRef","akio","",null,null],[3,"ActorSystem","","",null,null],[4,"ActorResponse","","",null,null],[13,"Normal","","",0,null],[13,"Async","","",0,null],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"exists","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"id","","",1,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[11,"request","","",1,null],[11,"send","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"stop","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"actorsystem"}}],[11,"new","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"on_startup","","",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"start","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"stop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"deregister_actor","","",2,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"result"}}],[11,"get_actor","","",2,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"option"}}],[0,"context","","",null,null],[3,"ThreadContext","akio::context","",null,null],[12,"handle","","",3,null],[12,"system","","",3,null],[5,"set_thread_context","","",null,{"inputs":[{"name":"threadcontext"}],"output":null}],[5,"maybe_handle","","",null,{"inputs":[],"output":{"name":"option"}}],[5,"handle","","",null,{"inputs":[],"output":{"name":"handle"}}],[5,"system","","",null,{"inputs":[],"output":{"name":"actorsystem"}}],[5,"execute","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"errors","akio","",null,null],[3,"Error","akio::errors","The Error type.",null,null],[12,"0","","The kind of the error.",4,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",5,null],[13,"ActorAlreadyExists","","",5,null],[13,"ActorDestroyed","","",5,null],[13,"InvalidActor","","",5,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",4,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",4,null],[11,"with_chain","","",4,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",4,null],[11,"iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backtrace","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_backtrace","","",4,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",4,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",4,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",4,{"inputs":[{"name":"box"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",4,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",4,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[0,"prelude","akio","",null,null],[0,"future","akio::prelude","Futures",null,null],[8,"Future","akio::prelude::future","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",7,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",7,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"wait","","Block the current thread until this future is resolved.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",7,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",7,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",7,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",7,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",7,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",7,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",7,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",7,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",7,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",7,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",7,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",7,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",7,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",8,null],[16,"Item","","The item that the future may resolve with.",8,null],[16,"Error","","The error that the future may resolve with.",8,null],[10,"into_future","","Consumes this object and produces a future.",8,null],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",null,null],[16,"Future","","The future for the conversion.",9,null],[16,"Error","","Possible errors during conversion.",9,null],[10,"future_from","","Consume the given value, beginning the conversion.",9,null],[8,"Executor","","A trait for types which can spawn fresh futures.",null,null],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",null,null],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",null,null],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",11,null],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",11,null],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",null,null],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[3,"Inspect","","Do something with the item of a future, passing it on.",null,null],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",null,null],[5,"result","","Creates a new \"leaf future\" which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"Empty","","A future which is never resolved.",null,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",null,null],[5,"collect","","Creates a future which represents a collection of the results of the futures given.",null,{"inputs":[{"name":"i"}],"output":{"name":"joinall"}}],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",null,null],[13,"A","","First branch of the type",12,null],[13,"B","","Second branch of the type",12,null],[5,"failed","","Creates a \"leaf future\" from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"futureresult"}}],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[3,"Ok","","A future representing a value that is immediately ready.",null,null],[4,"Loop","","The status of a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",13,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",13,null],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",null,null],[3,"Select2","","Future for the `merge` combinator, waiting for one of two differently-typed futures to complete.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"inputs":[{"name":"s"},{"name":"f"}],"output":{"name":"loopfn"}}],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectok"}}],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",null,null],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"futureresult"}}],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",null,null],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"Uuid","akio::prelude","A Universally Unique Identifier (UUID).",null,null],[3,"ActorRef","","",null,null],[3,"ActorSystem","","",null,null],[4,"ActorResponse","","",null,null],[13,"Normal","","",0,null],[13,"Async","","",0,null],[8,"Actor","","",null,null],[11,"handle_message","","",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"actorresponse"}}],[11,"on_start","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"on_stop","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"start","","",14,{"inputs":[{"name":"self"}],"output":{"name":"actorref"}}],[11,"done","","",14,{"inputs":[{"name":"self"}],"output":{"name":"actorresponse"}}],[11,"respond","","",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"actorresponse"}}],[11,"respond_fut","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"actorresponse"}}],[8,"MessageHandler","","",null,null],[16,"Response","","",15,null],[10,"handle","","",15,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"actorresponse"}}],[8,"Actor","akio","",null,null],[11,"handle_message","akio::prelude","",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"actorresponse"}}],[11,"on_start","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"on_stop","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"start","","",14,{"inputs":[{"name":"self"}],"output":{"name":"actorref"}}],[11,"done","","",14,{"inputs":[{"name":"self"}],"output":{"name":"actorresponse"}}],[11,"respond","","",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"actorresponse"}}],[11,"respond_fut","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"actorresponse"}}],[8,"MessageHandler","akio","",null,null],[16,"Response","","",15,null],[10,"handle","","",15,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"actorresponse"}}],[11,"handle_message","akio::prelude","",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"actorresponse"}}],[11,"on_start","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"on_stop","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"start","","",14,{"inputs":[{"name":"self"}],"output":{"name":"actorref"}}],[11,"done","","",14,{"inputs":[{"name":"self"}],"output":{"name":"actorresponse"}}],[11,"respond","","",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"actorresponse"}}],[11,"respond_fut","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"actorresponse"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"from_str","","Parse a hex string and interpret as a `Uuid`.",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[11,"default","","Returns the nil UUID, which is all zeroes",16,{"inputs":[],"output":{"name":"uuid"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",16,{"inputs":[{"name":"r"}],"output":{"name":"uuid"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"eq","akio::prelude::future","",11,{"inputs":[{"name":"self"},{"name":"executeerrorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"drop","","",37,null],[11,"poll","","",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"shareditem"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"futureresult"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"sharederror"}}],[11,"poll","","",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",41,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a new `ExecuteError`",34,{"inputs":[{"name":"executeerrorkind"},{"name":"f"}],"output":{"name":"executeerror"}}],[11,"kind","","Returns the associated reason for the error",34,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"into_future","","Consumes self and returns the original future that was spawned.",34,{"inputs":[{"name":"self"}],"output":{"name":"f"}}],[11,"split","","Splits out the homogeneous type from an either of tuples.",12,null],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nil","akio::prelude","The 'nil UUID'.",16,{"inputs":[],"output":{"name":"uuid"}}],[11,"new","","Creates a new `Uuid`.",16,{"inputs":[{"name":"uuidversion"}],"output":{"name":"option"}}],[11,"new_v4","","Creates a random `Uuid`.",16,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_fields","","Creates a `Uuid` from four field values.",16,null],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",16,null],[11,"get_variant","","Returns the variant of the `Uuid` structure.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_version_num","","Returns the version number of the `Uuid`.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_version","","Returns the version of the `Uuid`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",16,null],[11,"simple","","Returns a wrapper which when formatted via `fmt::Display` will format a string of 32 hexadecimal digits.",16,{"inputs":[{"name":"self"}],"output":{"name":"simple"}}],[11,"hyphenated","","Returns a wrapper which when formatted via `fmt::Display` will format a string of hexadecimal digits separated into groups with a hyphen.",16,{"inputs":[{"name":"self"}],"output":{"name":"hyphenated"}}],[11,"urn","","Returns a wrapper which when formatted via `fmt::Display` will format a string of the UUID as a full URN string.",16,{"inputs":[{"name":"self"}],"output":{"name":"urn"}}],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[4,"ActorResponse"],[3,"ActorRef"],[3,"ActorSystem"],[3,"ThreadContext"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[4,"ExecuteErrorKind"],[4,"Either"],[4,"Loop"],[8,"Actor"],[8,"MessageHandler"],[3,"Uuid"],[3,"LoopFn"],[3,"SelectOk"],[3,"Empty"],[3,"Fuse"],[3,"IntoStream"],[3,"Lazy"],[3,"SharedItem"],[3,"Join5"],[3,"Select"],[3,"OrElse"],[3,"JoinAll"],[3,"SelectAll"],[3,"FromErr"],[3,"Map"],[3,"Join"],[3,"FlattenStream"],[3,"Then"],[3,"ExecuteError"],[3,"Select2"],[3,"Ok"],[3,"Shared"],[3,"Inspect"],[3,"Flatten"],[3,"Join3"],[3,"SelectNext"],[3,"AndThen"],[3,"CatchUnwind"],[3,"SharedError"],[3,"PollFn"],[3,"MapErr"],[3,"Join4"]]};
searchIndex["akio_net"] = {"doc":"","items":[[3,"RemoteNode","akio_net","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"remotenode"}}],[11,"new","","",0,{"inputs":[{"name":"handle"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"connect","","",0,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":null}]],"paths":[[3,"RemoteNode"]]};
searchIndex["akio_syntax"] = {"doc":"","items":[[5,"actor_impl","akio_syntax","",null,{"inputs":[{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"actor_api","","",null,{"inputs":[{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"on_start","","",null,{"inputs":[{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"on_stop","","",null,{"inputs":[{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["child_spawner"] = {"doc":"","items":[[5,"main","child_spawner","",null,{"inputs":[],"output":null}],[8,"TelephoneActorRef","","",null,null],[10,"spawn_next","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"box"}}],[10,"send_spawn_next","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[10,"message","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"box"}}],[10,"send_message","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}]],"paths":[[8,"TelephoneActorRef"]]};
searchIndex["client_harness"] = {"doc":"","items":[[5,"main","client_harness","",null,{"inputs":[],"output":null}]],"paths":[]};
searchIndex["greet"] = {"doc":"","items":[[5,"main","greet","",null,{"inputs":[],"output":null}],[8,"ExampleActorRef","","",null,null],[10,"greet","","",0,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[10,"send_greet","","",0,{"inputs":[{"name":"self"}],"output":null}],[10,"set_greeting","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"box"}}],[10,"send_set_greeting","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}]],"paths":[[8,"ExampleActorRef"]]};
searchIndex["harness"] = {"doc":"","items":[[5,"main","harness","",null,{"inputs":[],"output":null}]],"paths":[]};
searchIndex["ping_pong"] = {"doc":"","items":[[3,"PongActor","ping_pong","",null,null],[3,"PingActor","","",null,null],[5,"main","","",null,{"inputs":[],"output":null}],[11,"on_start","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"on_stop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",0,{"inputs":[{"name":"actorref"}],"output":{"name":"self"}}],[11,"handle","","",0,{"inputs":[{"name":"self"},{"name":"pongactormessageping"}],"output":{"name":"actorresponse"}}],[11,"on_stop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"on_start","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"handle","","",1,{"inputs":[{"name":"self"},{"name":"pingactormessageinitialize"}],"output":{"name":"actorresponse"}}],[11,"handle","","",1,{"inputs":[{"name":"self"},{"name":"pingactormessagepong"}],"output":{"name":"actorresponse"}}],[8,"PongActorRef","","",null,null],[10,"ping","","",2,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[10,"send_ping","","",2,{"inputs":[{"name":"self"}],"output":null}],[8,"PingActorRef","","",null,null],[10,"initialize","","",3,{"inputs":[{"name":"self"},{"name":"actorref"}],"output":{"name":"box"}}],[10,"send_initialize","","",3,{"inputs":[{"name":"self"},{"name":"actorref"}],"output":null}],[10,"pong","","",3,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[10,"send_pong","","",3,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"PongActor"],[3,"PingActor"],[8,"PongActorRef"],[8,"PingActorRef"]]};
searchIndex["skynet"] = {"doc":"","items":[[5,"main","skynet","",null,{"inputs":[],"output":null}],[8,"SkynetActorRef","","",null,null],[10,"poke","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"box"}}],[10,"send_poke","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}]],"paths":[[8,"SkynetActorRef"]]};
initSearch(searchIndex);
